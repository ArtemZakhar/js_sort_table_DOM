{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAU,SAAS,gBAAgB,CAAC,MACpC,EAAO,SAAS,aAAa,CAAC,SAEhC,EAAQ,MACR,EAAS,GAkEb,SAAS,EAAS,CAAK,CAAE,CAAG,CAAE,CAAE,EAC9B,IAAM,EAAM,AAAO,QAAP,EAAe,EAAI,GAE/B,OAAO,EAAI,IAAI,CAAC,SAAC,CAAA,CAAG,CAApB,EACE,IAAM,EAAS,EAAG,EAAE,QAAQ,CAAC,CAAC,EAAM,CAAC,WAAW,CAC1C,EAAQ,EAAG,EAAE,QAAQ,CAAC,CAAC,EAAM,CAAC,WAAW,CACzC,EAAa,OAAO,EAAM,OAAO,CAAC,UAAW,YAEnD,AAAI,MAAM,GACD,EAAM,aAAa,CAAC,GAAQ,EAE5B,AAAC,CAAA,OAAO,GAAc,OAAO,EAAK,OAAO,CAAC,UAAW,IAAA,EAAQ,CAExE,EACF,CA9EA,EAAQ,OAAO,CAAC,SAAC,CAAjB,EACE,EAAO,gBAAgB,CAAC,QAAS,YAC/B,AAIJ,SAA0B,CAAU,EAClC,IAAM,EAAS,EAAG,EAAK,QAAQ,EAE3B,EAAW,EAAE,CAEjB,OAAQ,GACN,IAAK,OACC,IAAe,GAAU,AAAU,SAAV,GAC3B,CAAA,EAAQ,KADV,EAGA,EAAS,EACT,EAAW,EAAS,EAAG,EAAO,GAC9B,KAGF,KAAK,WACC,IAAe,GAAU,AAAU,SAAV,GAC3B,CAAA,EAAQ,KADV,EAGA,EAAS,EAET,EAAW,EAAS,EAAG,EAAO,GAC9B,KAGF,KAAK,MACC,IAAe,GAAU,AAAU,SAAV,GAC3B,CAAA,EAAQ,KADV,EAGA,EAAS,EACT,EAAW,EAAS,EAAG,EAAO,GAC9B,KAGF,KAAK,SACC,IAAe,GAAU,AAAU,SAAV,GAC3B,CAAA,EAAQ,KADV,EAGA,EAAS,EACT,EAAW,EAAS,EAAG,EAAO,GAC9B,KAGF,SACE,EAAW,CACf,CAEA,EAAK,SAAS,CAAG,GAGf,EADE,AAAU,QAAV,EACM,OAEA,MAGV,AAAA,EAAK,MAAM,CAAX,KAAA,CAAA,EAAY,EAAG,GACjB,EA5DqB,EAAO,WAAW,CACrC,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar headers = document.querySelectorAll(\"th\");\nvar body = document.querySelector(\"tbody\");\nvar order = \"ASC\";\nvar column = \"\";\nheaders.forEach(function(header) {\n    header.addEventListener(\"click\", function() {\n        sortByHeaderName(header.textContent);\n    });\n});\nfunction sortByHeaderName(headerName) {\n    var _body;\n    var lines = _to_consumable_array(body.children);\n    var newOrder = [];\n    switch(headerName){\n        case \"Name\":\n            if (headerName !== column && order === \"DESC\") order = \"ASC\";\n            column = headerName;\n            newOrder = sortLine(0, lines, order);\n            break;\n        case \"Position\":\n            if (headerName !== column && order === \"DESC\") order = \"ASC\";\n            column = headerName;\n            newOrder = sortLine(1, lines, order);\n            break;\n        case \"Age\":\n            if (headerName !== column && order === \"DESC\") order = \"ASC\";\n            column = headerName;\n            newOrder = sortLine(2, lines, order);\n            break;\n        case \"Salary\":\n            if (headerName !== column && order === \"DESC\") order = \"ASC\";\n            column = headerName;\n            newOrder = sortLine(3, lines, order);\n            break;\n        default:\n            newOrder = lines;\n    }\n    body.innerHTML = \"\";\n    if (order === \"ASC\") order = \"DESC\";\n    else order = \"ASC\";\n    (_body = body).append.apply(_body, _to_consumable_array(newOrder));\n}\nfunction sortLine(index, arr, or) {\n    var dir = or === \"ASC\" ? 1 : -1;\n    return arr.sort(function(a, b) {\n        var value = _to_consumable_array(a.children)[index].textContent;\n        var next = _to_consumable_array(b.children)[index].textContent;\n        var valueToNum = Number(value.replace(/(\\$|,)/g, \"\"));\n        if (isNaN(valueToNum)) return value.localeCompare(next) * dir;\n        else return (Number(valueToNum) - Number(next.replace(/(\\$|,)/g, \"\"))) * dir;\n    });\n}\n\n//# sourceMappingURL=index.67aeaa79.js.map\n","'use strict';\n\nconst headers = document.querySelectorAll('th');\nconst body = document.querySelector('tbody');\n\nlet order = 'ASC';\nlet column = '';\n\nheaders.forEach((header) => {\n  header.addEventListener('click', () => {\n    sortByHeaderName(header.textContent);\n  });\n});\n\nfunction sortByHeaderName(headerName) {\n  const lines = [...body.children];\n\n  let newOrder = [];\n\n  switch (headerName) {\n    case 'Name': {\n      if (headerName !== column && order === 'DESC') {\n        order = 'ASC';\n      }\n      column = headerName;\n      newOrder = sortLine(0, lines, order);\n      break;\n    }\n\n    case 'Position': {\n      if (headerName !== column && order === 'DESC') {\n        order = 'ASC';\n      }\n      column = headerName;\n\n      newOrder = sortLine(1, lines, order);\n      break;\n    }\n\n    case 'Age': {\n      if (headerName !== column && order === 'DESC') {\n        order = 'ASC';\n      }\n      column = headerName;\n      newOrder = sortLine(2, lines, order);\n      break;\n    }\n\n    case 'Salary': {\n      if (headerName !== column && order === 'DESC') {\n        order = 'ASC';\n      }\n      column = headerName;\n      newOrder = sortLine(3, lines, order);\n      break;\n    }\n\n    default:\n      newOrder = lines;\n  }\n\n  body.innerHTML = '';\n\n  if (order === 'ASC') {\n    order = 'DESC';\n  } else {\n    order = 'ASC';\n  }\n\n  body.append(...newOrder);\n}\n\nfunction sortLine(index, arr, or) {\n  const dir = or === 'ASC' ? 1 : -1;\n\n  return arr.sort((a, b) => {\n    const value = [...a.children][index].textContent;\n    const next = [...b.children][index].textContent;\n    const valueToNum = Number(value.replace(/(\\$|,)/g, ''));\n\n    if (isNaN(valueToNum)) {\n      return value.localeCompare(next) * dir;\n    } else {\n      return (Number(valueToNum) - Number(next.replace(/(\\$|,)/g, ''))) * dir;\n    }\n  });\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","headers","document","querySelectorAll","body","querySelector","order","column","sortLine","index","or","dir","sort","a","b","value","children","textContent","next","valueToNum","Number","replace","isNaN","localeCompare","forEach","header","addEventListener","sortByHeaderName","headerName","lines","newOrder","innerHTML","append","apply"],"version":3,"file":"index.67aeaa79.js.map"}